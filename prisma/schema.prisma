generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  email     String
  password  String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  Profile   Profile?
  sessions  Session[]
}

model Movie {
  id             String       @id @default(cuid())
  title          String
  original_title String
  plot           String
  directedBy     String[]
  poster         String
  genre          String[]
  mainActors     String[]
  releaseDate    DateTime
  MovieRated     MovieRated[]
}

model MovieRated {
  id               String   @id @default(cuid())
  rated            Float    @default(0.0)
  profileId        String?
  movieId          String
  contains_spoiler Boolean  @default(false)
  date             DateTime
  review           String
  already_watched  Boolean  @default(false)
  liked            Boolean  @default(false)
  movie            Movie    @relation(fields: [movieId], references: [id])
  Profile          Profile? @relation(fields: [profileId], references: [id])
}

model Profile {
  id       String       @id @default(cuid())
  name     String
  location String
  bio      String
  avatar   String
  userId   String       @unique
  reviews  MovieRated[]
  user     User         @relation(fields: [userId], references: [id])
}
